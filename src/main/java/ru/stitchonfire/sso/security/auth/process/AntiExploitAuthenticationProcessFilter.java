package ru.stitchonfire.sso.security.auth.process;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;
import ru.stitchonfire.sso.security.auth.handler.ChainedAuthenticationProcess;
import ru.stitchonfire.sso.security.auth.provider.NoCompletedAuthenticationToken;

@RequiredArgsConstructor
public class AntiExploitAuthenticationProcessFilter extends OncePerRequestFilter {

    private final List<ChainedAuthenticationProcess> processes;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        Optional<ChainedAuthenticationProcess> optionalChainedAuthenticationProcess = processes.stream()
                .filter(chain -> chain.getProcessUri().equalsIgnoreCase(request.getRequestURI()))
                .findFirst();

        if (optionalChainedAuthenticationProcess.isPresent()) {
            ChainedAuthenticationProcess process =
                    optionalChainedAuthenticationProcess.get(); // process identified by the uri
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

            if (authentication instanceof NoCompletedAuthenticationToken noCompletedAuthenticationToken
                    && noCompletedAuthenticationToken.getActualAuthenticationProcess() != process.getFilterClass()) {
                // redirect to the correct process
                response.sendRedirect(getValidUri(noCompletedAuthenticationToken));
                return;
            }
        }

        filterChain.doFilter(request, response);
    }

    /**
     * This method is used to get the valid uri of the current process
     * @param noCompletedAuthenticationToken NoCompletedAuthenticationToken
     * @return String uri
     */
    private String getValidUri(NoCompletedAuthenticationToken noCompletedAuthenticationToken) {
        return processes.stream()
                .filter(chain ->
                        chain.getFilterClass().equals(noCompletedAuthenticationToken.getActualAuthenticationProcess()))
                .findFirst()
                .map(ChainedAuthenticationProcess::getProcessUri)
                .orElseThrow(() -> new AuthenticationServiceException("No process found"));
    }
}
